function [output] = ProcessSpectralInterferogram(FFTlength, option)
%This function reads in a list of raw data files generated by PyVib using
%the Insight laser system. It will parse associated text files to extract
%scan information. It will process them in the order selected, so the user
%has to select them appropriately. For instance in a volume scan you should
%select the raw data file for the first frame of the volume first, and so
%on. Since they are number consecutively this can be easily done by sorting
%the files by name before selecting the list of files. 
% 
%The option input is a structure. The only field that has to be present is
%the "command" field. It will return the raw data if option.command =
%'raw' It will do normal processing but using a series of Kaiser-Bessel
%windows taking the min if option.command = 'KaiserAvg' The number of
%windows and beta values must also be set by 
%option.Nwin = 20 
%option.beta = [ 0.2 8.0] 
%The values above are reasonable for most applications. If any other string
%is in option.command it will do normal processing with the window
%specified. The funtion returns a structure containing all relevant data
%and scan parameters with
%descriptive names.
%usage: ProcessSpectralInterogram(FFTlength, option)

% Author: Brian Applegate
% last modified: 3/7/2020

    [fname, pname] = uigetfile('./*.*', 'MultiSelect', 'on');
    if nargin == 1
        option.command=' '; %if the value of this string is 'raw' the program returns the raw spectral interferograms in the variable mag and the dispersion vector in phase. Anything else is ignored.
    end
    rawflder=[filesep 'war' filesep];
    basepname=reverse(extractAfter(reverse(pname),rawflder));
    dname = reverse(extractBefore(extractAfter(reverse(pname),rawflder),filesep));
    if contains(dname,'Volume')
        scantype='Volume';
    elseif contains(dname,'MScan')
        scantype='MScan';
    elseif contains(dname, 'BScan')
        scantype='BScan';
    else
        scantype='Error: Cannot determine scan type';
    end

    fnamescan=fullfile(basepname,'ScanParams.txt');
    fid=fopen(fnamescan);
    if fid == -1
        disp('Error: Could not find ScanParams.txt')
    else
        firstline=fgetl(fid); %throw away first line
        firstline=fgetl(fid); %first line of text
        len=extractAfter(firstline, 'length= ');
        len=str2num(len(1:5));
        lengthSteps=int32(str2num(extractAfter(firstline, 'lengthSteps= ')));
        secondline=fgetl(fid);
        width=extractAfter(secondline, 'width= ');
        width=str2num(width(1:5));
        widthSteps=int32(str2num(extractAfter(secondline, 'widthSteps= ')));
        fclose(fid);
    end

    fnameproc=fullfile(basepname,'ProcOpts.txt');
    fid=fopen(fnameproc);
    if fid == -1
        disp('Error: Could not find ProcOpts.txt')
    else
        dk=NaN;
        counter = 1;
        while isnan(dk)
            line=fgetl(fid);
            dk=str2double(extractAfter(line, 'dkPerMeter='));
            if isnan(dk)
                dk=str2double(extractAfter(line, 'dk='));
            end
            if counter >=30
                break;
            end
            counter = counter + 1;
         end
        depth=1/(4*dk)*1000; %This is the Nyquist depth in mm, so the maximum depth we can measure
        fclose(fid);
    end
    
    fs=400e6; %sampling rate of digitizer

    fnameproc=fullfile(basepname,'miscellaneous information.txt');
    fid=fopen(fnameproc);
    if fid == -1
        disp('Error: Could not find miscellaneous information.txt')
    else

        tmp=fileread(fnameproc);
        total_points=str2num(extractBefore(extractAfter(tmp,'LaserTotalPoints='),'LaserSamplePoints'));
        sampl_poits=str2num(extractAfter(tmp,'LaserSamplePoints='));
        fclose(fid);
    end
%   sample_points=2825;
%   total_points=4000;
%   sample_points=3249;
%   total_points=3480; %This comes from the ?Laser Parameters.txt? file, Total Sweep Pts
%   sample_points=2821; %This comes from the ?Laser Parameters.txt? file, Sample Pts

    fsweep=fs/total_points;
        
    if strcmp('MScan',scantype)
       fnamescan=fullfile(basepname,'AudioParams.txt');
       fid=fopen(fnamescan);
        if fid == -1
            disp('Error: Could not find AudioParams.txt')
        else 
        %firstline=fgetl(fid); %throw away first line
        firstline=fgetl(fid); %first line of text
        freq=str2num(extractAfter(firstline, 'freq= '));
        secondline=fgetl(fid);
        amp=str2num(extractAfter(secondline, 'amp= '));
        thirdline=fgetl(fid);
        stridx=strfind(thirdline, 'trialDuration= ');
        stimDuration=str2num(thirdline(15:stridx-1));
        trialDuration=str2num(thirdline(15+stridx:end));
        fourthline=fgetl(fid);
        fifthline=fgetl(fid);
        sixthline=fgetl(fid);
        seventhline=fgetl(fid);
        eigthline=fgetl(fid);
        stridx=strfind(eigthline, 'd');
        numTrials=str2num(eigthline(11:stridx-2));
        fclose(fid);
        end
        if lengthSteps~=1 && widthSteps~=1
            scantype='Volume MScan';
        elseif lengthSteps~=1 && widthSteps==1
            scantype='BMScan';
        end
        num_alines=int64(round(fsweep*stimDuration*1e-3));
        t=(0:(num_alines-1))*1/fsweep;
%         t=0:1/fsweep:(stimDuration*1e-3);
%         num_alines=length(t)-1;
        frames=lengthSteps;
    else
        num_alines= lengthSteps;
        frames= widthSteps;
    end
     disp(scantype)

    if iscell(fname)
    else
        tmp{1}=fname;
        clear fname
        fname=tmp;
        clear tmp
    end

    [mag, phase]=OCTprocSantec(basepname, fname, length(fname), num_alines, scantype, option, FFTlength);
    if strcmp('raw',option)
        output.SpectralInterferogram=mag;
        output.dispersion=phase;
    else
        output.mag=mag;
        output.phase=phase;
    end
    output.ImageDimensions=[len width depth];
    
    if strcmp(scantype(end-4:end),'MScan')
        output.StimFreq = freq;
        output.time = t;
    end
    if scantype(end-5)=='B'
        output.ImageDimensionsPixels = [1 lengthSteps FFTlength/2];
        output.ImageDimensions=[width len depth];
    else
        output.ImageDimensionsPixels = [lengthSteps length(fname) FFTlength/2];
    end
    ouptut.scantype=scantype;
    output.FilesProcessed=fname;
    output.DataDirectory=dname;
    output.SweepFrequency = fsweep;
    output.scantype = scantype;
    
end

